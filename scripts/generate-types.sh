#!/bin/bash

# Generate types and validators from JSON Schema files

echo "üöÄ Generating types and validators from JSON Schemas..."

# Create output directories
mkdir -p src/generated
mkdir -p "Shared (App)/Generated"

# Generate JavaScript validators with runtime validation
echo "üìù Generating JavaScript validators..."
for schema in schemas/*Request.json schemas/*Response.json; do
  filename=$(basename "$schema" .json)
  echo "  - $filename"
  quicktype "$schema" \
    -o "src/generated/${filename}.js" \
    --lang javascript \
    --src-lang schema
done

# Generate Swift Codable types in a single file
echo "üìù Generating Swift types..."
echo "  - Combining all schemas into AllTypes.swift"
quicktype schemas/*.json \
  -o "Shared (App)/Generated/AllTypes.swift" \
  --lang swift \
  --src-lang schema \
  --swift-5-support \
  --no-initializers \
  --alphabetize-properties

# Create combined validator module for JavaScript (auto-generated from schemas)
echo "üì¶ Creating JavaScript validator module..."
{
  echo "// Auto-generated message validators"
  echo "// DO NOT EDIT - Generated by scripts/generate-types.sh"
  echo
  echo "// Import all generated validators"
  echo "const validators = {};"
  echo
  echo "// Request validators"
  for req in schemas/*Request.json; do
    base=$(basename "$req" .json)
    typeName="$base"                                      # e.g., AddWordToVocabularyListRequest
    actionName=$(echo "$base" | sed -E 's/Request$//' )   # e.g., AddWordToVocabularyList
    actionKey=$(printf "%s" "$actionName" | sed -E 's/^(.)/\L\1/') # camelCase first letter
    echo "validators.${actionKey} = require('./${typeName}');"
  done
  echo
  echo "// Response validators"
  for res in schemas/*Response.json; do
    base=$(basename "$res" .json)
    typeName="$base"                                       # e.g., LookupWordResponse
    actionName=$(echo "$base" | sed -E 's/Response$//' )   # e.g., LookupWord
    actionKey=$(printf "%s" "$actionName" | sed -E 's/^(.)/\L\1/') # e.g., lookupWord
    echo "validators.${actionKey}Response = require('./${typeName}');"
  done
  cat << 'EOF'

// Helper function to validate requests
function validateRequest(action, data) {
  const validator = validators[action];
  if (!validator) {
    return { valid: true, data }; // Pass through if no validator
  }
  try {
    const functionName = 'to' + action.charAt(0).toUpperCase() + action.slice(1) + 'Request';
    const validated = validator[functionName](JSON.stringify(data));
    return { valid: true, data: validated };
  } catch (error) {
    return { valid: false, error: error.message };
  }
}

// Helper function to validate responses
function validateResponse(action, data) {
  const validatorKey = action + 'Response';
  const validator = validators[validatorKey];
  if (!validator) {
    return { valid: true, data }; // Pass through if no validator
  }
  try {
    const functionName = 'to' + action.charAt(0).toUpperCase() + action.slice(1) + 'Response';
    const validated = validator[functionName](JSON.stringify(data));
    return { valid: true, data: validated };
  } catch (error) {
    return { valid: false, error: error.message };
  }
}

module.exports = {
  validateRequest,
  validateResponse
};
EOF
} > src/generated/validators.js

echo "‚úÖ Generation complete!"
echo ""
echo "Generated files:"
echo "  - JavaScript validators in src/generated/"
echo "  - Swift types in Shared (App)/Generated/AllTypes.swift"
echo "  - Validator module at src/generated/validators.js"
