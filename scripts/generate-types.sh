#!/bin/bash

# Generate types and validators from JSON Schema files

echo "🚀 Generating types and validators from JSON Schemas..."

# Create output directories
mkdir -p src/generated
mkdir -p "Shared (App)/Generated"

# Generate JavaScript validators with runtime validation
echo "📝 Generating JavaScript validators..."
for schema in schemas/*Request.json schemas/*Response.json; do
  filename=$(basename "$schema" .json)
  echo "  - $filename"
  quicktype "$schema" \
    -o "src/generated/${filename}.js" \
    --lang javascript \
    --src-lang schema
done

# Generate Swift Codable types in a single file
echo "📝 Generating Swift types..."
echo "  - Combining all schemas into AllTypes.swift"
quicktype schemas/*.json \
  -o "Shared (App)/Generated/AllTypes.swift" \
  --lang swift \
  --src-lang schema \
  --swift-5-support \
  --no-initializers \
  --alphabetize-properties

# Create combined validator module for JavaScript
echo "📦 Creating JavaScript validator module..."
cat > src/generated/validators.js << 'EOF'
// Auto-generated message validators
// DO NOT EDIT - Generated by scripts/generate-types.sh

// Import all generated validators
const validators = {};

// Request validators
validators.lookupWord = require('./LookupWordRequest');
validators.addWordToVocabularyList = require('./AddWordToVocabularyListRequest');
validators.submitReview = require('./SubmitReviewRequest');
validators.createVocabularyList = require('./CreateVocabularyListRequest');
validators.fetchAllVocabularyLists = require('./FetchAllVocabularyListsRequest');
validators.fetchVocabularyListWords = require('./FetchVocabularyListWordsRequest');
validators.updateWord = require('./UpdateWordRequest');
validators.fetchSettings = require('./FetchSettingsRequest');
validators.updateSettings = require('./UpdateSettingsRequest');
validators.fetchReviewQueue = require('./FetchReviewQueueRequest');
validators.addRecentSearch = require('./AddRecentSearchRequest');
validators.fetchRecentSearches = require('./FetchRecentSearchesRequest');
validators.incrementLookupCount = require('./IncrementLookupCountRequest');
validators.fetchLookupCount = require('./FetchLookupCountRequest');
validators.fetchLookupStats = require('./FetchLookupStatsRequest');

// Response validators
validators.lookupWordResponse = require('./LookupWordResponse');
validators.addWordToVocabularyListResponse = require('./AddWordToVocabularyListResponse');
validators.submitReviewResponse = require('./SubmitReviewResponse');
validators.createVocabularyListResponse = require('./CreateVocabularyListResponse');
validators.fetchAllVocabularyListsResponse = require('./FetchAllVocabularyListsResponse');
validators.fetchVocabularyListWordsResponse = require('./FetchVocabularyListWordsResponse');
validators.updateWordResponse = require('./UpdateWordResponse');
validators.fetchSettingsResponse = require('./FetchSettingsResponse');
validators.updateSettingsResponse = require('./UpdateSettingsResponse');
validators.fetchReviewQueueResponse = require('./FetchReviewQueueResponse');
validators.addRecentSearchResponse = require('./AddRecentSearchResponse');
validators.fetchRecentSearchesResponse = require('./FetchRecentSearchesResponse');
validators.incrementLookupCountResponse = require('./IncrementLookupCountResponse');
validators.fetchLookupCountResponse = require('./FetchLookupCountResponse');
validators.fetchLookupStatsResponse = require('./FetchLookupStatsResponse');

// Helper function to validate requests
function validateRequest(action, data) {
  const validator = validators[action];
  if (!validator) {
    return { valid: true, data }; // Pass through if no validator
  }
  
  try {
    const functionName = 'to' + action.charAt(0).toUpperCase() + action.slice(1) + 'Request';
    const validated = validator[functionName](JSON.stringify(data));
    return { valid: true, data: validated };
  } catch (error) {
    return { valid: false, error: error.message };
  }
}

// Helper function to validate responses
function validateResponse(action, data) {
  const validatorKey = action + 'Response';
  const validator = validators[validatorKey];
  if (!validator) {
    return { valid: true, data }; // Pass through if no validator
  }
  
  try {
    const functionName = 'to' + action.charAt(0).toUpperCase() + action.slice(1) + 'Response';
    const validated = validator[functionName](JSON.stringify(data));
    return { valid: true, data: validated };
  } catch (error) {
    return { valid: false, error: error.message };
  }
}

module.exports = {
  validateRequest,
  validateResponse
};
EOF

echo "✅ Generation complete!"
echo ""
echo "Generated files:"
echo "  - JavaScript validators in src/generated/"
echo "  - Swift types in Shared (App)/Generated/AllTypes.swift"
echo "  - Validator module at src/generated/validators.js"