/******/ (() => { // webpackBootstrap
/*!********************************!*\
  !*** ./src/content/content.js ***!
  \********************************/
// Content script for VocabDict Safari Extension

console.log('VocabDict content script loaded');

// iOS text selection handler
let lookupButton = null;
let selectionTimeout = null;

// Debounced selection handler
document.addEventListener('selectionchange', () => {
  clearTimeout(selectionTimeout);
  selectionTimeout = setTimeout(() => {
    handleSelection();
  }, 300);
});
function handleSelection() {
  const selection = window.getSelection();
  const selectedText = selection.toString().trim();

  // Clean up existing button
  if (lookupButton) {
    lookupButton.remove();
    lookupButton = null;
  }

  // Validate selection
  if (selectedText && selectedText.length <= 50 && selectedText.split(/\s+/).length <= 3) {
    try {
      const range = selection.getRangeAt(0);
      const rect = range.getBoundingClientRect();

      // Only show button if selection is visible
      if (rect.width > 0 && rect.height > 0) {
        createLookupButton(selectedText, rect);
      }
    } catch (e) {
      console.error('VocabDict: Error handling selection', e);
    }
  }
}
function createLookupButton(selectedText, rect) {
  // TODO: Implement lookup button creation
  console.log('Would create lookup button for:', selectedText);
}

// Clean up on page unload
window.addEventListener('pagehide', () => {
  if (lookupButton) {
    lookupButton.remove();
  }
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBRUFBLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGlDQUFpQyxDQUFDOztBQUU5QztBQUNBLElBQUlDLFlBQVksR0FBRyxJQUFJO0FBQ3ZCLElBQUlDLGdCQUFnQixHQUFHLElBQUk7O0FBRTNCO0FBQ0FDLFFBQVEsQ0FBQ0MsZ0JBQWdCLENBQUMsaUJBQWlCLEVBQUUsTUFBTTtFQUNqREMsWUFBWSxDQUFDSCxnQkFBZ0IsQ0FBQztFQUU5QkEsZ0JBQWdCLEdBQUdJLFVBQVUsQ0FBQyxNQUFNO0lBQ2xDQyxlQUFlLENBQUMsQ0FBQztFQUNuQixDQUFDLEVBQUUsR0FBRyxDQUFDO0FBQ1QsQ0FBQyxDQUFDO0FBRUYsU0FBU0EsZUFBZUEsQ0FBQSxFQUFHO0VBQ3pCLE1BQU1DLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxZQUFZLENBQUMsQ0FBQztFQUN2QyxNQUFNQyxZQUFZLEdBQUdILFNBQVMsQ0FBQ0ksUUFBUSxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7O0VBRWhEO0VBQ0EsSUFBSVosWUFBWSxFQUFFO0lBQ2hCQSxZQUFZLENBQUNhLE1BQU0sQ0FBQyxDQUFDO0lBQ3JCYixZQUFZLEdBQUcsSUFBSTtFQUNyQjs7RUFFQTtFQUNBLElBQUlVLFlBQVksSUFDWkEsWUFBWSxDQUFDSSxNQUFNLElBQUksRUFBRSxJQUN6QkosWUFBWSxDQUFDSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUNELE1BQU0sSUFBSSxDQUFDLEVBQUU7SUFFekMsSUFBSTtNQUNGLE1BQU1FLEtBQUssR0FBR1QsU0FBUyxDQUFDVSxVQUFVLENBQUMsQ0FBQyxDQUFDO01BQ3JDLE1BQU1DLElBQUksR0FBR0YsS0FBSyxDQUFDRyxxQkFBcUIsQ0FBQyxDQUFDOztNQUUxQztNQUNBLElBQUlELElBQUksQ0FBQ0UsS0FBSyxHQUFHLENBQUMsSUFBSUYsSUFBSSxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3JDQyxrQkFBa0IsQ0FBQ1osWUFBWSxFQUFFUSxJQUFJLENBQUM7TUFDeEM7SUFDRixDQUFDLENBQUMsT0FBT0ssQ0FBQyxFQUFFO01BQ1Z6QixPQUFPLENBQUMwQixLQUFLLENBQUMscUNBQXFDLEVBQUVELENBQUMsQ0FBQztJQUN6RDtFQUNGO0FBQ0Y7QUFFQSxTQUFTRCxrQkFBa0JBLENBQUNaLFlBQVksRUFBRVEsSUFBSSxFQUFFO0VBQzlDO0VBQ0FwQixPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQ0FBaUMsRUFBRVcsWUFBWSxDQUFDO0FBQzlEOztBQUVBO0FBQ0FGLE1BQU0sQ0FBQ0wsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLE1BQU07RUFDeEMsSUFBSUgsWUFBWSxFQUFFO0lBQ2hCQSxZQUFZLENBQUNhLE1BQU0sQ0FBQyxDQUFDO0VBQ3ZCO0FBQ0YsQ0FBQyxDQUFDLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92b2NhYmRpY3QvLi9zcmMvY29udGVudC9jb250ZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvbnRlbnQgc2NyaXB0IGZvciBWb2NhYkRpY3QgU2FmYXJpIEV4dGVuc2lvblxuXG5jb25zb2xlLmxvZygnVm9jYWJEaWN0IGNvbnRlbnQgc2NyaXB0IGxvYWRlZCcpO1xuXG4vLyBpT1MgdGV4dCBzZWxlY3Rpb24gaGFuZGxlclxubGV0IGxvb2t1cEJ1dHRvbiA9IG51bGw7XG5sZXQgc2VsZWN0aW9uVGltZW91dCA9IG51bGw7XG5cbi8vIERlYm91bmNlZCBzZWxlY3Rpb24gaGFuZGxlclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgKCkgPT4ge1xuICBjbGVhclRpbWVvdXQoc2VsZWN0aW9uVGltZW91dCk7XG4gIFxuICBzZWxlY3Rpb25UaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaGFuZGxlU2VsZWN0aW9uKCk7XG4gIH0sIDMwMCk7XG59KTtcblxuZnVuY3Rpb24gaGFuZGxlU2VsZWN0aW9uKCkge1xuICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gIGNvbnN0IHNlbGVjdGVkVGV4dCA9IHNlbGVjdGlvbi50b1N0cmluZygpLnRyaW0oKTtcbiAgXG4gIC8vIENsZWFuIHVwIGV4aXN0aW5nIGJ1dHRvblxuICBpZiAobG9va3VwQnV0dG9uKSB7XG4gICAgbG9va3VwQnV0dG9uLnJlbW92ZSgpO1xuICAgIGxvb2t1cEJ1dHRvbiA9IG51bGw7XG4gIH1cbiAgXG4gIC8vIFZhbGlkYXRlIHNlbGVjdGlvblxuICBpZiAoc2VsZWN0ZWRUZXh0ICYmIFxuICAgICAgc2VsZWN0ZWRUZXh0Lmxlbmd0aCA8PSA1MCAmJiBcbiAgICAgIHNlbGVjdGVkVGV4dC5zcGxpdCgvXFxzKy8pLmxlbmd0aCA8PSAzKSB7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gICAgICBjb25zdCByZWN0ID0gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICBcbiAgICAgIC8vIE9ubHkgc2hvdyBidXR0b24gaWYgc2VsZWN0aW9uIGlzIHZpc2libGVcbiAgICAgIGlmIChyZWN0LndpZHRoID4gMCAmJiByZWN0LmhlaWdodCA+IDApIHtcbiAgICAgICAgY3JlYXRlTG9va3VwQnV0dG9uKHNlbGVjdGVkVGV4dCwgcmVjdCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcignVm9jYWJEaWN0OiBFcnJvciBoYW5kbGluZyBzZWxlY3Rpb24nLCBlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9va3VwQnV0dG9uKHNlbGVjdGVkVGV4dCwgcmVjdCkge1xuICAvLyBUT0RPOiBJbXBsZW1lbnQgbG9va3VwIGJ1dHRvbiBjcmVhdGlvblxuICBjb25zb2xlLmxvZygnV291bGQgY3JlYXRlIGxvb2t1cCBidXR0b24gZm9yOicsIHNlbGVjdGVkVGV4dCk7XG59XG5cbi8vIENsZWFuIHVwIG9uIHBhZ2UgdW5sb2FkXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncGFnZWhpZGUnLCAoKSA9PiB7XG4gIGlmIChsb29rdXBCdXR0b24pIHtcbiAgICBsb29rdXBCdXR0b24ucmVtb3ZlKCk7XG4gIH1cbn0pOyJdLCJuYW1lcyI6WyJjb25zb2xlIiwibG9nIiwibG9va3VwQnV0dG9uIiwic2VsZWN0aW9uVGltZW91dCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJoYW5kbGVTZWxlY3Rpb24iLCJzZWxlY3Rpb24iLCJ3aW5kb3ciLCJnZXRTZWxlY3Rpb24iLCJzZWxlY3RlZFRleHQiLCJ0b1N0cmluZyIsInRyaW0iLCJyZW1vdmUiLCJsZW5ndGgiLCJzcGxpdCIsInJhbmdlIiwiZ2V0UmFuZ2VBdCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsImhlaWdodCIsImNyZWF0ZUxvb2t1cEJ1dHRvbiIsImUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=