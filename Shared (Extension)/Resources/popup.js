(()=>{"undefined"==typeof browser&&"undefined"!=typeof chrome&&(window.browser=chrome),document.addEventListener("DOMContentLoaded",function(){e.init(),t.init()});const e={init(){this.loadTheme(),this.setupThemeListeners()},loadTheme(){browser.storage.local.get("settings").then(e=>{const t=(e.settings||{}).theme||"dark";this.applyTheme(t);const s=document.getElementById("theme-select");s&&(s.value=t)})},applyTheme(e){document.documentElement.setAttribute("data-theme",e)},setupThemeListeners(){const e=document.getElementById("theme-select");e&&e.addEventListener("change",async e=>{const t=e.target.value;this.applyTheme(t);const s=(await browser.storage.local.get("settings")).settings||{};s.theme=t,await browser.storage.local.set({settings:s})})}},t={init(){this.setupTabListeners(),this.showTab("search")},setupTabListeners(){document.querySelectorAll(".tab-button").forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.tab;this.showTab(t)})})},showTab(e){switch(document.querySelectorAll(".tab-button").forEach(t=>{const s=t.dataset.tab===e;t.classList.toggle("active",s),t.setAttribute("aria-selected",s)}),document.querySelectorAll(".tab-panel").forEach(t=>{const s=t.id===`${e}-tab`;t.classList.toggle("active",s)}),e){case"search":s.init();break;case"lists":n.init();break;case"learn":i.init();break;case"settings":a.init()}}},s={searchTimeout:null,recentSearches:[],init(){this.setupSearchInput(),this.loadRecentSearches()},setupSearchInput(){const e=document.querySelector(".search-input");e&&(e.addEventListener("input",e=>{clearTimeout(this.searchTimeout);const t=e.target.value.trim();0!==t.length?this.searchTimeout=setTimeout(()=>{this.performSearch(t)},300):this.clearSearchResults()}),e.addEventListener("keydown",e=>{if("Enter"===e.key){clearTimeout(this.searchTimeout);const t=e.target.value.trim();t&&this.performSearch(t)}}))},async performSearch(e){try{const t=await browser.runtime.sendMessage({type:"lookup_word",word:e});t.success?t.data?(this.displaySearchResult(t.data),this.addToRecentSearches(e)):this.displayNoResults(e,t.suggestions):this.displayError(t.error)}catch(e){console.error("Search error:",e),this.displayError("Failed to search. Please try again.")}},displaySearchResult(e){const t=document.querySelector(".search-results"),s=document.querySelector(".recent-searches");s&&(s.style.display="none"),t.innerHTML=`\n      <div class="word-card">\n        <div class="word-header">\n          <div>\n            <span class="word-title">${e.word}</span>\n            <span class="word-pronunciation">${e.pronunciation}</span>\n          </div>\n          <button class="add-to-list-btn" title="Add to list">üìö</button>\n        </div>\n        ${e.definitions.map(e=>`\n          <div class="definition-section">\n            <div class="word-part-of-speech">${e.partOfSpeech}</div>\n            <div class="word-definition">${e.meaning}</div>\n            ${e.examples.length>0?`\n              <div class="word-examples">\n                <h4>Examples:</h4>\n                <ul>\n                  ${e.examples.map(e=>`<li>${e}</li>`).join("")}\n                </ul>\n              </div>\n            `:""}\n          </div>\n        `).join("")}\n        ${e.synonyms.length>0?`\n          <div class="word-synonyms">\n            <strong>Synonyms:</strong> ${e.synonyms.join(", ")}\n          </div>\n        `:""}\n        ${e.antonyms.length>0?`\n          <div class="word-synonyms">\n            <strong>Antonyms:</strong> ${e.antonyms.join(", ")}\n          </div>\n        `:""}\n      </div>\n    `,t.querySelector(".add-to-list-btn").addEventListener("click",()=>this.addToList(e))},displayNoResults(e,t=[]){const s=document.querySelector(".search-results"),n=document.querySelector(".recent-searches");n&&(n.style.display="none"),s.innerHTML=`\n      <div class="no-results">\n        <p>No results found for "<strong>${e}</strong>"</p>\n        ${t.length>0?`\n          <p class="small-text">Did you mean:</p>\n          <ul class="suggestions-list">\n            ${t.map(e=>`\n              <li><a href="#" data-suggestion="${e}">${e}</a></li>\n            `).join("")}\n          </ul>\n        `:""}\n      </div>\n    `,s.querySelectorAll("[data-suggestion]").forEach(e=>{e.addEventListener("click",e=>{e.preventDefault();const t=e.target.dataset.suggestion;document.querySelector(".search-input").value=t,this.performSearch(t)})})},displayError(e){const t=document.querySelector(".search-results"),s=document.querySelector(".recent-searches");s&&(s.style.display="none"),t.innerHTML=`\n      <div class="error-message">\n        <p>Error: ${e}</p>\n      </div>\n    `},clearSearchResults(){const e=document.querySelector(".search-results"),t=document.querySelector(".recent-searches");e.innerHTML="",t&&(t.style.display="block")},async addToList(e){try{const t=(await browser.storage.local.get("vocab_lists")).vocab_lists||[],s=t.find(e=>e.isDefault)||t[0];if(!s)return void r.show("No vocabulary lists found","error");const n=await browser.runtime.sendMessage({type:"add_to_list",word:e.word,listId:s.id});n.success?r.show(`Added "${e.word}" to ${s.name}`,"success"):r.show(n.error||"Failed to add word","error")}catch(e){console.error("Add to list error:",e),r.show("Failed to add word to list","error")}},async loadRecentSearches(){const e=await browser.storage.local.get("recentSearches");this.recentSearches=e.recentSearches||[],this.displayRecentSearches()},displayRecentSearches(){const e=document.querySelector(".recent-searches-list");e&&0!==this.recentSearches.length&&(e.innerHTML=this.recentSearches.slice(0,5).map(e=>`<li data-search="${e}">${e}</li>`).join(""),e.querySelectorAll("li").forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.search;document.querySelector(".search-input").value=t,this.performSearch(t)})}))},async addToRecentSearches(e){this.recentSearches.includes(e)||(this.recentSearches.unshift(e),this.recentSearches=this.recentSearches.slice(0,10),await browser.storage.local.set({recentSearches:this.recentSearches}),this.displayRecentSearches())}},n={currentListId:null,currentList:null,currentSort:"recent",currentFilter:"all",init(){this.loadLists(),this.setupListControls()},async loadLists(){try{const e=await browser.runtime.sendMessage({type:"get_lists"});e.success&&this.displayLists(e.data)}catch(e){console.error("Load lists error:",e)}},displayLists(e){const t=document.querySelector(".lists-container");0!==e.length?(t.innerHTML=e.map(e=>`\n      <div class="list-item" data-list-id="${e.id}">\n        <div class="list-item-header">\n          <span class="list-icon">üìÅ</span>\n          <span class="list-name">${e.name}</span>\n          <span class="list-count">${Object.keys(e.words).length} words</span>\n        </div>\n        <div class="list-updated">Last updated: ${this.formatDate(e.updated||e.created)}</div>\n      </div>\n    `).join(""),t.querySelectorAll(".list-item").forEach(e=>{e.addEventListener("click",()=>{const t=e.dataset.listId;this.selectList(t)})})):t.innerHTML='<p class="text-center">No vocabulary lists yet</p>'},selectList(e){document.querySelectorAll(".list-item").forEach(t=>{t.classList.toggle("selected",t.dataset.listId===e)}),this.currentListId=e,this.loadListWords(e)},async loadListWords(e){try{const t=await browser.runtime.sendMessage({type:"get_lists"});if(t.success){const s=t.data.find(t=>t.id===e);s&&(this.currentList=s,this.displayListWords(s))}}catch(e){console.error("Load list words error:",e)}},refreshWordsList(){this.currentList&&this.displayListWords(this.currentList)},async displayListWords(e){const t=document.querySelector(".words-in-list");try{const s="recent"===this.currentSort?"dateAdded":this.currentSort;let n="asc";"dateAdded"!==s&&"lastReviewed"!==s||(n="desc");const i=await browser.runtime.sendMessage({type:"get_list_words",listId:e.id,sortBy:s,sortOrder:n,filterBy:this.currentFilter});if(!i.success)return void(t.innerHTML='<p class="text-center">Error loading words</p>');const a=i.data||[];if(this.updateStatusSection(a.length),0===a.length)return void(t.innerHTML='<p class="text-center">No words in this list</p>');t.innerHTML=`\n        <h3 class="section-title">Words in "${e.name}"</h3>\n        ${a.map(e=>this.renderWordItem(e)).join("")}\n      `}catch(e){console.error("Error displaying words:",e),t.innerHTML='<p class="text-center">Error loading words</p>'}},updateStatusSection(e){const t=document.getElementById("list-status"),s=document.getElementById("sort-indicator"),n=document.getElementById("filter-indicator"),i=document.getElementById("result-count");if(t.style.display="block",s.textContent=`Sorted by: ${{recent:"Most Recent (newest first)",alphabetical:"Alphabetical (A-Z)",dateAdded:"Date Added (newest first)",lastReviewed:"Last Reviewed (newest first)",difficulty:"Difficulty (easy to hard)",lookupCount:"Lookup Count (least to most)"}[this.currentSort]||"Most Recent"}`,this.currentFilter&&"all"!==this.currentFilter){const e={easy:"Easy difficulty only",medium:"Medium difficulty only",hard:"Hard difficulty only"};n.textContent=`Filter: ${e[this.currentFilter]}`,n.style.display="inline"}else n.style.display="none";i.textContent=`${e} word${1!==e?"s":""}`},renderWordItem(e){const t="recent"===this.currentSort?"dateAdded":this.currentSort;let s=`\n      <div class="word-list-item">\n        <div class="difficulty-indicator difficulty-${e.difficulty||"medium"}"></div>\n        <div class="word-list-text">\n          <div class="word-list-word">${e.word}</div>\n          <div class="word-list-status">\n    `;if("lookupCount"===t){const t=e.lookupCount||0;s+=`\n        <span class="lookup-count">${t} lookup${1!==t?"s":""}</span>\n      `}else s+="dateAdded"===t?`\n        <span class="date-added">Added: ${this.formatDate(e.dateAdded)}</span>\n      `:"difficulty"===t?`\n        <span class="difficulty-badge">${{easy:"Easy",medium:"Medium",hard:"Hard"}[e.difficulty]||"Medium"}</span>\n      `:e.lastReviewed?`Last reviewed: ${this.formatDate(e.lastReviewed)}`:"Not reviewed yet";return s+='\n          </div>\n        </div>\n        <div class="word-actions">\n          <button class="word-action-btn" title="Edit notes">üìù</button>\n        </div>\n      </div>\n    ',s},setupListControls(){const e=document.getElementById("new-list-button");e&&e.addEventListener("click",()=>this.showNewListDialog());const t=document.getElementById("cancel-new-list"),s=document.getElementById("confirm-new-list"),n=document.getElementById("new-list-name");t&&t.addEventListener("click",()=>this.hideNewListDialog()),s&&s.addEventListener("click",()=>this.createNewList()),n&&n.addEventListener("keydown",e=>{"Enter"===e.key?this.createNewList():"Escape"===e.key&&this.hideNewListDialog()});const i=document.getElementById("sort-select"),a=document.getElementById("filter-select");i&&i.addEventListener("change",e=>{this.currentSort=e.target.value,this.refreshWordsList()}),a&&a.addEventListener("change",e=>{this.currentFilter=e.target.value,this.refreshWordsList()})},showNewListDialog(){const e=document.getElementById("new-list-dialog"),t=document.getElementById("new-list-name");e&&(e.style.display="flex",t&&(t.value="",t.focus()))},hideNewListDialog(){const e=document.getElementById("new-list-dialog");e&&(e.style.display="none")},async createNewList(){const e=document.getElementById("new-list-name"),t=e?e.value.trim():"";if(t)try{const e=await browser.runtime.sendMessage({type:"create_list",name:t});e.success?(r.show(`Created list "${t}"`,"success"),this.hideNewListDialog(),this.loadLists()):r.show(e.error||"Failed to create list","error")}catch(e){console.error("Create list error:",e),r.show("Failed to create list","error")}else r.show("Please enter a list name","warning")},formatDate(e){const t=new Date(e),s=new Date,n=Math.abs(s-t),i=Math.floor(n/864e5);return 0===i?"today":1===i?"yesterday":i<7?`${i} days ago`:t.toLocaleDateString()}},i={currentSession:null,currentWordIndex:0,sessionWords:[],isFlipped:!1,sessionStats:{total:0,completed:0,known:0,unknown:0,skipped:0,mastered:0},init(){this.setupLearnControls(),this.loadReviewQueue()},setupLearnControls(){const e=document.getElementById("start-review-btn");e&&e.addEventListener("click",()=>this.startReviewSession());const t=document.getElementById("known-btn"),s=document.getElementById("unknown-btn"),n=document.getElementById("skip-btn"),i=document.getElementById("mastered-btn");t&&t.addEventListener("click",()=>this.handleReviewAction("known")),s&&s.addEventListener("click",()=>this.handleReviewAction("unknown")),n&&n.addEventListener("click",()=>this.handleReviewAction("skipped")),i&&i.addEventListener("click",()=>this.handleReviewAction("mastered"));const a=document.getElementById("flashcard");a&&a.addEventListener("click",()=>this.flipCard()),document.addEventListener("keydown",e=>{if(this.currentSession)switch(e.key){case" ":case"Enter":e.preventDefault(),this.flipCard();break;case"1":e.preventDefault(),this.handleReviewAction("known");break;case"2":e.preventDefault(),this.handleReviewAction("unknown");break;case"3":e.preventDefault(),this.handleReviewAction("skipped");break;case"4":e.preventDefault(),this.handleReviewAction("mastered")}})},async loadReviewQueue(){try{const e=await browser.runtime.sendMessage({type:"get_review_queue"});if(e.success){const t=e.data.length;this.updateDueWordsCount(t),this.displayReviewStatus(t)}}catch(e){console.error("Load review queue error:",e)}},updateDueWordsCount(e){const t=document.querySelector(".words-due-count");t&&(t.textContent=e>0?`${e} words due`:"No words due")},displayReviewStatus(e){const t=document.querySelector(".learn-container");0!==e?(t.innerHTML=`\n      <div class="review-start">\n        <div class="review-header">\n          <div class="review-icon">üéì</div>\n          <h2 class="review-title">Ready to Learn</h2>\n          <p class="review-subtitle">Let's review your vocabulary words</p>\n        </div>\n        \n        <div class="review-stats">\n          <div class="stat-item">\n            <span class="stat-number">${e}</span>\n            <span class="stat-label">Words Due</span>\n          </div>\n        </div>\n        \n        <button id="start-review-btn" class="btn-primary btn-large start-session-btn">\n          <span class="btn-icon">üöÄ</span>\n          <span class="btn-text">Start Review Session</span>\n        </button>\n        \n        <div class="review-tips">\n          <h4>üí° Review Tips</h4>\n          <ul>\n            <li>Click the card or press <kbd>Space</kbd> to flip</li>\n            <li>Use number keys <kbd>1-4</kbd> for quick actions</li>\n            <li>Be honest with your self-assessment for better learning</li>\n            <li>Regular practice leads to better retention</li>\n          </ul>\n        </div>\n      </div>\n    `,this.setupLearnControls()):t.innerHTML='\n        <div class="no-reviews">\n          <div class="no-reviews-icon">üéâ</div>\n          <h3>All caught up!</h3>\n          <p>No words are due for review right now.</p>\n          <p class="small-text">Come back later or add more words to your lists.</p>\n        </div>\n      '},async startReviewSession(){try{const e=await browser.runtime.sendMessage({type:"get_review_queue"});if(!e.success||0===e.data.length)return void r.show("No words available for review","info");this.sessionWords=e.data,this.currentWordIndex=0,this.isFlipped=!1,this.sessionStats={total:this.sessionWords.length,completed:0,known:0,unknown:0,skipped:0,mastered:0},this.currentSession={startTime:new Date,results:[]},this.displayCurrentWord(),this.updateSessionProgress()}catch(e){console.error("Start review session error:",e),r.show("Failed to start review session","error")}},displayCurrentWord(){if(!this.currentSession||this.currentWordIndex>=this.sessionWords.length)return void this.endReviewSession();const e=this.sessionWords[this.currentWordIndex];document.querySelector(".learn-container").innerHTML=`\n      <div class="review-session">\n        <div class="session-header">\n          <div class="progress-bar">\n            <div class="progress-fill" style="width: ${this.currentWordIndex/this.sessionWords.length*100}%"></div>\n          </div>\n          <div class="progress-text">${this.currentWordIndex+1} of ${this.sessionWords.length}</div>\n        </div>\n        \n        <div class="flashcard-container">\n          <div id="flashcard" class="flashcard ${this.isFlipped?"flipped":""}" data-word="${e.word}">\n            <div class="flashcard-front">\n              <div class="card-content">\n                <div class="word-header">\n                  <div class="word-number">${this.currentWordIndex+1}</div>\n                </div>\n                <h2 class="word-display">${e.word}</h2>\n                <div class="flip-hint">\n                  <span class="hint-icon">üëÜ</span>\n                  <span class="hint-text">Click to reveal definition</span>\n                </div>\n              </div>\n            </div>\n            <div class="flashcard-back">\n              <div class="card-content">\n                <div class="definition-header">\n                  <h3 class="word-title">${e.word}</h3>\n                  ${e.pronunciation?`<div class="word-pronunciation">${e.pronunciation}</div>`:""}\n                </div>\n                \n                <div class="definitions-container">\n                  ${e.definitions&&e.definitions.length>0?e.definitions.map(e=>`\n                    <div class="definition-item">\n                      <span class="part-of-speech">${e.partOfSpeech}</span>\n                      <div class="definition-text">${e.meaning}</div>\n                      ${e.examples&&e.examples.length>0?`\n                        <div class="examples">\n                          ${e.examples.slice(0,2).map(e=>`<div class="example">"${e}"</div>`).join("")}\n                        </div>\n                      `:""}\n                    </div>\n                  `).join(""):'<div class="no-definition">No definition available</div>'}\n                </div>\n                \n                ${e.synonyms&&e.synonyms.length>0?`\n                  <div class="word-synonyms">\n                    <strong>Synonyms:</strong> ${e.synonyms.slice(0,3).join(", ")}\n                  </div>\n                `:""}\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div class="review-actions ${this.isFlipped?"visible":"hidden"}">\n          <button id="known-btn" class="review-btn btn-known" title="I know this (1)">\n            <span class="btn-icon">‚úÖ</span>\n            <span class="btn-text">Know</span>\n            <span class="btn-key">1</span>\n          </button>\n          <button id="unknown-btn" class="review-btn btn-unknown" title="I don't know this (2)">\n            <span class="btn-icon">‚ùå</span>\n            <span class="btn-text">Learning</span>\n            <span class="btn-key">2</span>\n          </button>\n          <button id="skip-btn" class="review-btn btn-skip" title="Skip for now (3)">\n            <span class="btn-icon">‚è≠Ô∏è</span>\n            <span class="btn-text">Skip</span>\n            <span class="btn-key">3</span>\n          </button>\n          <button id="mastered-btn" class="review-btn btn-mastered" title="I've mastered this (4)">\n            <span class="btn-icon">üéØ</span>\n            <span class="btn-text">Mastered</span>\n            <span class="btn-key">4</span>\n          </button>\n        </div>\n      </div>\n    `,this.setupLearnControls(),this.isFlipped=!1},flipCard(){if(!this.currentSession)return;const e=document.getElementById("flashcard"),t=document.querySelector(".review-actions");this.isFlipped=!this.isFlipped,e&&e.classList.toggle("flipped",this.isFlipped),t&&(t.classList.toggle("visible",this.isFlipped),t.classList.toggle("hidden",!this.isFlipped))},async handleReviewAction(e){if(!this.currentSession||this.currentWordIndex>=this.sessionWords.length)return;const t=this.sessionWords[this.currentWordIndex],s={word:t.word,action:e,timestamp:new Date};this.sessionStats.completed++,this.sessionStats[e]++,this.currentSession.results.push(s);try{await browser.runtime.sendMessage({type:"process_review",word:t.word,result:e,listId:t.listId||null}),this.currentWordIndex++,this.displayCurrentWord(),this.updateSessionProgress()}catch(e){console.error("Process review error:",e),r.show("Failed to save review result","error")}},updateSessionProgress(){const e=document.querySelector(".progress-fill");if(e&&this.sessionWords.length>0){const t=this.currentWordIndex/this.sessionWords.length*100;e.style.width=`${t}%`}},endReviewSession(){if(!this.currentSession)return;const e=new Date,t=Math.round((e-this.currentSession.startTime)/1e3);document.querySelector(".learn-container").innerHTML=`\n      <div class="session-complete">\n        <div class="completion-icon">üéâ</div>\n        <h3>Session Complete!</h3>\n        \n        <div class="session-summary">\n          <div class="summary-stats">\n            <div class="stat-row">\n              <span class="stat-label">Words Reviewed:</span>\n              <span class="stat-value">${this.sessionStats.completed}</span>\n            </div>\n            <div class="stat-row">\n              <span class="stat-label">Known:</span>\n              <span class="stat-value known">${this.sessionStats.known}</span>\n            </div>\n            <div class="stat-row">\n              <span class="stat-label">Learning:</span>\n              <span class="stat-value unknown">${this.sessionStats.unknown}</span>\n            </div>\n            <div class="stat-row">\n              <span class="stat-label">Mastered:</span>\n              <span class="stat-value mastered">${this.sessionStats.mastered}</span>\n            </div>\n            <div class="stat-row">\n              <span class="stat-label">Duration:</span>\n              <span class="stat-value">${Math.floor(t/60)}m ${t%60}s</span>\n            </div>\n          </div>\n        </div>\n        \n        <div class="session-actions">\n          <button id="review-more-btn" class="btn-primary">Review More</button>\n          <button id="finish-session-btn" class="btn-secondary">Finish</button>\n        </div>\n      </div>\n    `;const s=document.getElementById("review-more-btn"),n=document.getElementById("finish-session-btn");s&&s.addEventListener("click",()=>this.loadReviewQueue()),n&&n.addEventListener("click",()=>this.loadReviewQueue()),this.currentSession=null,this.sessionWords=[],this.currentWordIndex=0,r.show(`Review session completed! ${this.sessionStats.completed} words reviewed.`,"success")}},a={init(){this.loadSettings(),this.setupSettingsListeners()},async loadSettings(){const e=(await browser.storage.local.get("settings")).settings||{theme:"dark",autoAddLookups:!0,dailyReviewLimit:30},t=document.getElementById("auto-add-toggle");t&&(t.checked=e.autoAddLookups);const s=document.getElementById("review-limit");s&&(s.value=e.dailyReviewLimit)},setupSettingsListeners(){const e=document.getElementById("auto-add-toggle");e&&e.addEventListener("change",e=>{this.updateSetting("autoAddLookups",e.target.checked)});const t=document.getElementById("review-limit");t&&t.addEventListener("change",e=>{this.updateSetting("dailyReviewLimit",parseInt(e.target.value))})},async updateSetting(e,t){const s=(await browser.storage.local.get("settings")).settings||{};s[e]=t,await browser.storage.local.set({settings:s})}},r={show(e,t="info"){const s=document.querySelector(".toast-container"),n=document.createElement("div");n.className=`toast ${t}`,n.innerHTML=`\n      <span class="toast-icon">${{info:"‚ÑπÔ∏è",success:"‚úÖ",warning:"‚ö†Ô∏è",error:"‚ùå"}[t]}</span>\n      <span class="toast-message">${e}</span>\n    `,s.appendChild(n),setTimeout(()=>{n.style.opacity="0",setTimeout(()=>n.remove(),300)},3e3)}}})();